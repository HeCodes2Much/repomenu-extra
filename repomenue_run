#!/usr/bin/env bash
# -*-coding:utf-8 -*-
# Auto updated?
#   Yes
#File :
#   repomenue_run
#Author:
#   The-Repo-Club [wayne6324@gmail.com]
#Github:
#   https://github.com/The-Repo-Club/
#
# Created:
#   Mon 27 Deccember 2021, 05:06:47 PM [GMT]
# Modified:
#   Fri 21 January 2022, 02:29:56 PM [GMT]
#
# Description:
#   <Todo>
#



## Set Colors (copied from makepkg)
ALL_OFF="\e[1;0m"
RED="\e[1;31m"
GREEN="\e[1;32m"
YELLOW="\e[1;33m"
BLUE="\e[1;34m"
PURPLE="\e[1:35m"
CYAN="\e[1:36m"

COLS="$(tput cols)"

readonly ALL_OFF BOLD RED GREEN YELLOW BLUE PURPLE CYAN COL

REPOMENU=/usr/share/repoclub/menu.ini
REPOWM=/usr/share/repoclub/wm.ini

if command -v repomenu &> /dev/null; then
    while IFS= read -r Line; do
	    Get=$(gsettings get org.therepoclub.repomenu.preferences "$Line")
	    printf -v "REPOMENU_${Line^^}" '%s' "${Get//\'}"
    done < $REPOMENU
fi

if command -v repowm &> /dev/null; then
    while IFS= read -r Line; do
	    Get=$(gsettings get org.therepoclub.repowm.preferences "$Line")
	    printf -v "REPOWM_${Line^^}" '%s' "${Get//\'}"
    done < $REPOWM
fi

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR
# Parameter 1: Message to print
#==============================================================================

# copied from makepkg
error() {
    local mesg=$1; shift
    printf "${RED}==> ERROR:${ALL_OFF} %s${ALL_OFF}\n" "$mesg" "$@" >&2

}

#=== FUNCTION =================================================================
#        Name: usage
# Description: Prints the usage
#==============================================================================

usage() {

    printf "
    Run a command using the selected default program

    Usage:
      %s [options] [<command>]...

    Options:
      -h, --help                        Display help.
    " "${0##*/}"

    if command -v repowm &> /dev/null; then
        printf "
    RepoWM Options:
    "
        while IFS= read -r Line; do
            Variable_name="REPOWM_${Line^^}"
            num=$(( ${#Line} / 4 ))
            if [[ "$num" -eq 2 ]];then
                echo -e "\t--${Line}\t\t\t ${!Variable_name}"
            elif [[ "$num" -eq 3 ]];then
                echo -e "\t--${Line}\t\t\t ${!Variable_name}"
            elif [[ "$num" -eq 4 ]];then
                echo -e "\t--${Line}\t\t ${!Variable_name}"
            else
            Runecho -e "\t--${Line}\t ${!Variable_name}"
            fi
        done < $REPOWM
    fi

    if command -v repowm &> /dev/null; then
        printf "
    RepoMenu Options:
    "
        while IFS= read -r Line; do
            Variable_name="REPOMENU_${Line^^}"
            num=$(( ${#Line} / 4 ))
            if [[ "$num" -eq 2 ]];then
                echo -e "\t--${Line}\t\t\t ${!Variable_name}"
            elif [[ "$num" -eq 3 ]];then
                echo -e "\t--${Line}\t\t\t ${!Variable_name}"
            elif [[ "$num" -eq 4 ]];then
                echo -e "\t--${Line}\t\t ${!Variable_name}"
            else
            Runecho -e "\t--${Line}\t ${!Variable_name}"
            fi
        done < $REPOMENU
    fi
}

while true; do
    while IFS= read -r Line; do
        CMD=${Line^^}
        REPOMENUCMD="REPOMENU_${CMD:2}"
        REPOWMCMD="REPOWM_${CMD:2}"
        if [[ ! -z "${!REPOMENUCMD}" ]]; then
            key=--${Line:2}
            var="${!REPOMENUCMD}"
        elif [[ ! -z "${!REPOWMCMD}" ]]; then
            key=--${Line:2}
            var="${!REPOWMCMD}"
        fi
    done <<< $1
    case $1 in
        -h|--help|-\?)
            usage
            exit 0
            ;;

        $key)
            shift
            $var $@
            exit 1
            ;;
        --)
            shift
            break
            ;;
        -*)
            error "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            break
            ;;
    esac
done
